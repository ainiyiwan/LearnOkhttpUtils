John Gall：“复杂系统总是源于简单系统的演化。”

抽象的能力

抽象思考的能力怎么强调都不为过。

现实的需求纷繁复杂，如果架构师不能够把这些乱无头绪的需求抽象成一些“概念”，在概念的层次进行思考，系统根本就无法设计。

但是抽象出概念以后还不够，还要看看这个概念是不是正交的，能不能独立变化，如果不能，考虑下新的概念抽象。

“正交”讲的是线性无关，非常重要，就像一个点(x,y)，在x轴的变化不会影响y，y轴的变化不会影响x，这就是正交。

“正交”威力巨大，(x,y)可以表达二维平面的所有的点，如果增加一个z轴，不但能表达三维空间中所有的点，并且每个轴都可以独立变化。

如果能做出正交的设计，这个系统的开发和维护会非常舒服，以为可以放心大胆的修改其中一个方面儿不会影响其他。

设计模式一直强调的『发现变化并且封装变化』其实就是这个意思。

抽象能力的训练没有捷径，就是经验的积累，勤于思考和学习。

例如：学习Android的程序员可以思考下Android是怎么对未知的，

纷繁复杂的应用程序进行抽象的？为什么有Activity、Service、BroadcastReceiver、ContentProvider这四大组件？

也许今时今刻我的能力还不足以理解这个系统 但是时间久了 谁知道呢 只要拥有这种思维 能力都是锻炼出来的 试试看 鸿洋的这个框架还能不能更抽象一点呢

说一下小见解 首先要实现一个功能 
第一步 分析这个功能需要哪些组件 比如网络请求的实现 需要request（请求） response（返回数据） Callback(返回通知接口) 
      这当中每一个组件有需要哪些小组件 同时上一个大组件 能不能进一步抽象 抽象到最后 就是本质了
      比如response需要cookie来缓存 需要拦截器来打印数据 当然 request也需要拦截器
      最后还需要一些工具类
      
      
第二步 把这两个请求设为接口 或者抽象类 供不同的请求实现

第三步 当然 需要一个入口类 这个入口类用来组装所有功能 但是并不提供实现 实现需要调用相应的实现类的实现方法

